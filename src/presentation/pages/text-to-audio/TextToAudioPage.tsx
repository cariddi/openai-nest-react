import { useState } from 'react'
import { TEXT_TO_AUDIO_ERROR_RESPONSE, textToAudioUseCase } from '../../../core/use-cases'
import { GptMessage, MyMessage, TextMessageBoxSelect, TypingLoader } from '../../components'

const disclaimer = `## What audio would you like me to generate?
## All audios are generated by AI.
`

interface TextMessage {
  text: string
  isGpt: boolean
  type: "text"
}

interface AudioMessage {
  text: string
  isGpt: boolean
  audio: string
  type: "audio"
}

type Message = TextMessage | AudioMessage

const voices = [
  { id: "nova", text: "Nova" },
  { id: "alloy", text: "Alloy" },
  { id: "echo", text: "Echo" },
  { id: "fable", text: "Fable" },
  { id: "onyx", text: "Onyx" },
  { id: "shimmer", text: "Shimmer" },
]

export const TextToAudioPage = () => {
  const [isLoading, setIsLoading] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])

  const handlePost = async (text: string, selectedVoice: string) => {
    setIsLoading(true)

    const newMessage = `Generate and return an audio file with the provided text using the voice of ${selectedVoice}: "${text}".`
    setMessages((prevMessages) => [...prevMessages, { text: newMessage, isGpt: false, type: 'text' }])

    const { ok, audioUrl, message } = await textToAudioUseCase(text, selectedVoice)

    if (!ok) setMessages((prevMessages) => [...prevMessages, { text: TEXT_TO_AUDIO_ERROR_RESPONSE.message, isGpt: true, type: 'text' }])
    else setMessages((prevMessages) => [...prevMessages, { text: `${selectedVoice} - ${message}`, audio: audioUrl, isGpt: true, type: 'audio' }])

    setIsLoading(false)
  }

  return (
    <div className='chat-container'>
      <div className='chat-messages'>
        <div className='grid grid-cols-12 gap-y-2'></div>

        {/* Welcome */}
        <GptMessage text={disclaimer} />

        {
          messages.map((message, index) => (
            message.isGpt
              ? <GptMessage key={index} text={message.text} audio={message.type === 'audio' ? message.audio : undefined} />
              : <MyMessage key={index} text={message.text} />
          ))
        }

        {
          isLoading && (
            <div className='col-start-1 col-end-12 fade-in'>
              <TypingLoader />
            </div>
          )
        }

      </div>

      <TextMessageBoxSelect
        options={voices}
        onSendMessage={handlePost}
        placeholder='Type here what you need'
        disableCorrections
      />
    </div>
  )
}
